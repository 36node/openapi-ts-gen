import Writer from "code-block-writer";
import * as changecase from "change-case";

import { GeneratorContext } from "../generator";

export function renderClient(ctx: GeneratorContext, writer?: Writer) {
  writer || (writer = new Writer({ indentNumberOfSpaces: 2 }));

  writer
    .writeLine(`// Generated by openapi-ts-gen. DO NOT EDIT`)
    .writeLine(`/* eslint-disable */`)
    .writeLine(`import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";`)
    .blankLine()
    .writeLine(`import * as schemas from "./schemas";`)
    .newLine()
    .write(`export class ${changecase.pascalCase(ctx.name)}APIClient`)
    .block(() => {
      writer
        .writeLine(`public client: AxiosInstance;`)
        .write(`constructor(client: AxiosInstance)`)
        .block(() => {
          writer
            .writeLine(`if (!client.defaults.baseURL) {`)
            .writeLine(`  throw new Error("client's baseURL MUST specified");`)
            .writeLine(`}`)
            .writeLine(`this.client = client;`);
        })
        .newLine();

      ctx.operations.forEach(
        ({ name, path, method, request, response, pathParams, queryParams, hasBody }) => {
          const replacedPath = replacePathParameter(path);

          writer
            .write(`${name} = (req: schemas.${request}, config: AxiosRequestConfig = {}): `)
            .write(`Response<`)
            .conditionalWrite(response === null, "void")
            .conditionalWrite(response !== null && response.typeName !== "string" && response.typeName !== "number", `schemas.${response?.typeName}`)
            .conditionalWrite(response !== null && response.typeName === "string" || response.typeName == "number", `${response?.typeName}`)
            .conditionalWrite(response?.repeated, `[]`)
            .write(`> =>`)
            .block(() => {
              writer.conditionalWriteLine(
                pathParams.length > 0,
                `checkPathParams("${name}", req, [${pathParams
                  .map((p) => JSON.stringify(p))
                  .join(", ")}])`
              );
              writer
                .write(`return this.client.request(`)
                .inlineBlock(() => {
                  writer
                    .writeLine(`...config,`)
                    .writeLine(`url: \`${replacedPath}\`, `)
                    .writeLine(`method: ${JSON.stringify(method)}, `)
                    .conditionalWriteLine(
                      queryParams.length > 0,
                      `params: pick(req, [${queryParams
                        .map((p) => JSON.stringify(p))
                        .join(", ")}]),`
                    )
                    .conditionalWriteLine(hasBody, `data: req.body,`);
                })
                // .conditionalWrite(hasBody, `, req.body`)
                // .conditionalWrite(hasParams, `, {params: {}}`)
                .write(`)`);
            });
        }
      );
    });

  writer
    .blankLine()
    .writeLine(`type Response<T> = Promise<AxiosResponse<T>>`)
    .writeLine(`type Dict = Record<string, any>;`)
    .blankLine()
    .writeLine(`function checkPathParams(op: string, req: Dict, ks: string[]) {`)
    .writeLine(`  ks.forEach((p) => {`)
    .writeLine(`    if (!req[p]) {`)
    .writeLine(`      throw new Error(\`\${p} is required for \${op}\`)`)
    .writeLine(`    }`)
    .writeLine(`  })`)
    .writeLine(`}`)
    .blankLine()
    .writeLine(`function pick(o: Dict, ks: string[]) {`)
    .writeLine(`  return ks.reduce((r, p) => {`)
    .writeLine(`    r[p] = o[p];`)
    .writeLine(`    return r;`)
    .writeLine(`  }, {} as Dict)`)
    .writeLine(`}`);

  return writer.toString();
}

function replacePathParameter(path) {
  const reg = /\{(\w+)\}/;
  return (
    "/" +
    path
      .split("/")
      .slice(1)
      .map((seg) => {
        if (reg.test(seg)) {
          return seg.replace(reg, (match: string, $1: string) => "${req." + $1 + "}");
        }
        return seg;
      })
      .join("/")
  );
}

function isMutate(method: string) {
  return ["post", "put", "patch"].includes(method);
}
