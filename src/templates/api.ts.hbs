// Generated from openapi.yml. DO NOT EDIT
/* eslint-disable */
import { AxiosInstance, AxiosResponse } from "axios";

import * as types from "./types";

export class {{pascalCase api}}APIClient {
  private client: AxiosInstance;
  constructor(client: AxiosInstance) {
    if (!client.defaults.baseURL) {
      throw new Error("client's baseURL MUST specified");
    }
    this.client = client;
  }

  {{#each apis}}
  /** {{summary}} */
  {{name}}(req: types.{{request}}): Response<{{#isVoid response}}void{{else}}types.{{response}}{{/isVoid}}> {
    {{#if pathParams}}
    checkPathParams("{{name}}", req, {{{asArrayLiteral pathParams}}})
    {{/if ~}}
    {{#isMutate this}}
    return this.client.{{method}}(`{{replacePathParameter path}}`{{#if hasBody}}, req.body{{/if}});
    {{else}}
    return this.client.{{method}}(`{{replacePathParameter path}}`{{#if queryParams}}, {params: pick(req, {{{asArrayLiteral queryParams}}})}{{/if}});
    {{/isMutate}}
  }
  {{/each}}
}

type Response<T> = Promise<AxiosResponse<T>>
type Dict = Record<string, any>;

function checkPathParams(op: string, req: Dict, ks: string[]) {
  ks.forEach((p) => {
    if (!req[p]) {
      throw new Error(`${p} is required for ${op}`)
    }
  })
}

function pick(o: Dict, ks: string[]) {
  return ks.reduce((r, p) => {
    r[p] = o[p];
    return r;
  }, {} as Dict)
}
